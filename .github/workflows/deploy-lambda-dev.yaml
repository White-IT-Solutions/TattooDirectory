# .github/workflows/deploy-lambda-dev.yaml

name: Deploy Lambda to S3 (dev)

on:
  push:
    branches: [ release-dev ]
    paths:
      - 'src/**' # Only trigger when code in the src directory changes

permissions:
  id-token: write # Required for using OIDC to authenticate with AWS
  contents: read

jobs:
  test:
    name: 'Run Automated Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python test dependencies and run tests
        run: |
          pip install -r tests/python/requirements.txt
          pytest tests/python/

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Node.js test dependencies and run tests
        run: |
          npm --prefix tests/js install
          npm --prefix tests/js test

  deploy:
    name: 'Deploy Lambda (dev)'
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: dev

    strategy:
      matrix:
        lambda:
          - { name: 'api-handler', path: 'src/operations/first_lambda/', handler: 'first.lambda_handler', runtime: 'python3.12' }
          - { name: 'dynamodb-sync', path: 'src/operations/second_lambda/', handler: 'second.lambda_handler', runtime: 'python3.12' }
          - { name: 'discover-studios', path: 'src/operations/third_lambda/', handler: 'main.handler', runtime: 'nodejs20.x' }
          - { name: 'find-artists', path: 'src/operations/fourth_lambda/', handler: 'app.handler', runtime: 'python3.12' }
          - { name: 'queue-scraping', path: 'src/operations/fifth_lambda/', handler: 'index.handler', runtime: 'nodejs20.x' }
          - { name: 'rotate-nat-gateway-eip', path: 'src/operations/sixth_lambda/', handler: 'run.handler', runtime: 'python3.12' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-west-2

      - name: Get Lambda Artifacts Bucket Name
        id: ssm_bucket_name
        uses: aws-actions/aws-ssm-get-parameter@v1
        with:
          name: /dev-tattoo-mvp/lambda-artifacts-bucket-name
          with-decryption: true

      - name: Deploy Lambda to S3
        uses: aws-actions/aws-lambda-deploy@v1
        with:
          function-name: ${{ matrix.lambda.name }}
          s3-bucket: ${{ steps.ssm_bucket_name.outputs.value }}
          s3-key: 'lambda-artifacts/${{ matrix.lambda.name }}.zip'
          code-artifacts-dir: ${{ matrix.lambda.path }}
          runtime: ${{ matrix.lambda.runtime }}
          handler: ${{ matrix.lambda.handler }}
          dry-run: 'true'