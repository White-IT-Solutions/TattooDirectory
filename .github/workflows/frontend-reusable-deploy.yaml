# .github/workflows/frontend-reusable-deploy.yaml

name: 'Reusable Frontend Build & Deploy'

on:
  workflow_call:
    inputs:
      environment:
        description: 'The deployment environment (e.g., dev, prod)'
        required: true
        type: string
      ssm_prefix:
        description: 'The SSM parameter prefix for the environment'
        required: true
        type: string
      next_public_environment:
        description: 'The value for NEXT_PUBLIC_ENVIRONMENT (e.g., development, production)'
        required: true
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        required: true
      GOOGLE_MAPS_API_KEY:
        required: true

env:
  AWS_REGION: eu-west-2
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    name: 'Build and Deploy Frontend (${{ inputs.environment }})'
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup workflow command escaping
        run: |
          echo 'escape_gh_output() { local input="$1"; input="${input//%/%25}"; input="${input//$'\n'/%0A}"; input="${input//$'\r'/%0D}"; input="${input//:/%3A}"; input="${input//,/%2C}"; echo "$input"; }' >> "$GITHUB_PATH"

      - name: Get Environment Configuration from SSM
        id: env-config
        run: |
          API_URL=$(aws ssm get-parameter --name "${{ inputs.ssm_prefix }}/api-gateway-url" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null || echo "")
          DISTRIBUTION_ID=$(aws ssm get-parameter --name "${{ inputs.ssm_prefix }}/cloudfront-distribution-id" --query 'Parameter.Value' --output text 2>/dev/null || echo "")
          BUCKET_NAME=$(aws ssm get-parameter --name "${{ inputs.ssm_prefix }}/frontend-bucket-name" --query 'Parameter.Value' --output text 2>/dev/null || echo "")

          if [ -z "$API_URL" ]; then
            echo "::error::API Gateway URL not found in SSM parameter ${{ inputs.ssm_prefix }}/api-gateway-url"
            exit 1
          fi
          
          echo "api-url=$(escape_gh_output "$API_URL")" >> $GITHUB_OUTPUT
          echo "distribution-id=$(escape_gh_output "$DISTRIBUTION_ID")" >> $GITHUB_OUTPUT
          echo "bucket-name=$(escape_gh_output "$BUCKET_NAME")" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        env:
          NEXT_PUBLIC_ENVIRONMENT: ${{ inputs.next_public_environment }}
          NEXT_PUBLIC_API_URL: ${{ steps.env-config.outputs.api-url }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          echo "Building frontend with API URL: $NEXT_PUBLIC_API_URL"
          npm run build

      - name: Deploy to S3
        run: |
          if [ -z "${{ steps.env-config.outputs.bucket-name }}" ]; then
            echo "::error::Frontend S3 bucket name not found in SSM. Cannot deploy."
            exit 1
          fi
          # Sync the built frontend to S3
          aws s3 sync out/ s3://${{ steps.env-config.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          # Upload HTML files with shorter cache control
          aws s3 sync out/ "s3://${{ steps.env-config.outputs.bucket-name }}/" \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront cache
        if: steps.env-config.outputs.distribution-id != ''
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{ steps.env-config.outputs.distribution-id }}"
          aws cloudfront create-invalidation --distribution-id "${{ steps.env-config.outputs.distribution-id }}" --paths "/*"

      - name: Output deployment summary
        run: |
          echo "::notice title=Frontend Deployment Complete::$(escape_gh_output "Frontend deployed successfully to ${{ inputs.environment }} environment")"
          echo "::notice title=API Gateway URL::$(escape_gh_output "${{ steps.env-config.outputs.api-url }}")"
          echo "::notice title=S3 Bucket::$(escape_gh_output "${{ steps.env-config.outputs.bucket-name }}")"