# .github/workflows/terraform-dev.yaml

name: 'Terraform CI/CD (dev)'

on:
  push:
    branches:
      - release-dev
  pull_request:
    branches:
      - release-dev

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: 'Validate Terraform (dev)'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init -backend-config="key=dev/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

  deploy:
    name: 'Terraform Deploy (dev)'
    needs: validate
    runs-on: ubuntu-latest
    environment:
      name: dev # Hardcoded to the 'dev' environment

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: >= 1.5.0

      - name: Terraform Init
        run: terraform init -backend-config="key=dev/terraform.tfstate"

      - name: Terraform Plan
        # On pull requests, this will generate a plan.
        # On pushes to main, this plan is for the apply step.
        run: terraform plan -input=false -var-file="environments/dev/main.tfvars"

      - name: Terraform Apply
        # This step only runs on pushes to the main branch, not on pull requests.
        # The 'dev' environment's protection rule will trigger a manual approval here.
        if: github.ref == 'refs/heads/release-dev' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="environments/dev/main.tfvars"