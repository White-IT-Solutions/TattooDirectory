name: UI/UX Audit and Visual Regression Testing

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/ui-ux-audit.yml'
  schedule:
    # Nightly comprehensive audit at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - 'visual-regression'
          - 'accessibility'
          - 'theme-testing'
          - 'responsive'
          - 'comprehensive'
      update_baselines:
        description: 'Update visual baselines after test'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/playwright-browsers

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.determine-test-type.outputs.test-type }}
      is-scheduled: ${{ steps.determine-test-type.outputs.is-scheduled }}
    steps:
      - name: Determine test type
        id: determine-test-type
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "test-type=comprehensive" >> $GITHUB_OUTPUT
            echo "is-scheduled=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "test-type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
            echo "is-scheduled=false" >> $GITHUB_OUTPUT
          else
            echo "test-type=visual-regression" >> $GITHUB_OUTPUT
            echo "is-scheduled=false" >> $GITHUB_OUTPUT
          fi

  visual-regression:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'visual-regression') || needs.setup.outputs.test-type == 'comprehensive'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        viewport: [desktop, tablet, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-browsers-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            playwright-browsers-

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Download baseline screenshots
        uses: actions/download-artifact@v3
        with:
          name: visual-baselines-${{ matrix.browser }}-${{ matrix.viewport }}
          path: frontend/tests/e2e/visual-regression/baselines
        continue-on-error: true

      - name: Start development server
        working-directory: frontend
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        working-directory: frontend
        run: |
          npx playwright test tests/e2e/visual-regression \
            --project=${{ matrix.browser }} \
            --grep="@${{ matrix.viewport }}" \
            --reporter=json:test-results/visual-${{ matrix.browser }}-${{ matrix.viewport }}.json
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results-${{ matrix.browser }}-${{ matrix.viewport }}
          path: |
            frontend/test-results/
            frontend/tests/e2e/visual-regression/screenshots/
          retention-days: 30

      - name: Upload updated baselines
        uses: actions/upload-artifact@v3
        if: github.event.inputs.update_baselines == 'true'
        with:
          name: visual-baselines-${{ matrix.browser }}-${{ matrix.viewport }}
          path: frontend/tests/e2e/visual-regression/baselines/
          retention-days: 90

  accessibility-audit:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'accessibility') || needs.setup.outputs.test-type == 'comprehensive'
    strategy:
      matrix:
        theme: [light, dark]
        viewport: [desktop, tablet, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install chromium --with-deps

      - name: Start development server
        working-directory: frontend
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run accessibility tests
        working-directory: frontend
        run: |
          npx playwright test tests/e2e/accessibility \
            --grep="@${{ matrix.theme }}.*@${{ matrix.viewport }}" \
            --reporter=json:test-results/accessibility-${{ matrix.theme }}-${{ matrix.viewport }}.json

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results-${{ matrix.theme }}-${{ matrix.viewport }}
          path: frontend/test-results/
          retention-days: 30

  theme-testing:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'theme-testing') || needs.setup.outputs.test-type == 'comprehensive'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install chromium --with-deps

      - name: Start development server
        working-directory: frontend
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run theme transition tests
        working-directory: frontend
        run: |
          npx playwright test tests/e2e/theme-testing \
            --reporter=json:test-results/theme-testing.json

      - name: Upload theme test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: theme-test-results
          path: frontend/test-results/
          retention-days: 30

  responsive-testing:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'responsive') || needs.setup.outputs.test-type == 'comprehensive'
    strategy:
      matrix:
        device: [desktop, tablet, mobile]
        orientation: [portrait, landscape]
        exclude:
          - device: desktop
            orientation: landscape
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install chromium --with-deps

      - name: Start development server
        working-directory: frontend
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run responsive tests
        working-directory: frontend
        run: |
          npx playwright test tests/e2e/responsive \
            --grep="@${{ matrix.device }}.*@${{ matrix.orientation }}" \
            --reporter=json:test-results/responsive-${{ matrix.device }}-${{ matrix.orientation }}.json

      - name: Upload responsive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: responsive-results-${{ matrix.device }}-${{ matrix.orientation }}
          path: frontend/test-results/
          retention-days: 30

  report-generation:
    runs-on: ubuntu-latest
    needs: [setup, visual-regression, accessibility-audit, theme-testing, responsive-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: frontend/test-results/artifacts

      - name: Generate consolidated report
        working-directory: frontend
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { ReportAggregator } = require('./tests/e2e/reporting/ReportAggregator.ts');
          
          async function generateReport() {
            const aggregator = new ReportAggregator();
            const artifactsDir = path.join(process.cwd(), 'test-results', 'artifacts');
            
            // Collect all test result files
            const testResults = [];
            if (fs.existsSync(artifactsDir)) {
              const walkDir = (dir) => {
                const files = fs.readdirSync(dir);
                files.forEach(file => {
                  const filePath = path.join(dir, file);
                  if (fs.statSync(filePath).isDirectory()) {
                    walkDir(filePath);
                  } else if (file.endsWith('.json')) {
                    try {
                      const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                      testResults.push(content);
                    } catch (e) {
                      console.warn('Failed to parse:', filePath);
                    }
                  }
                });
              };
              walkDir(artifactsDir);
            }
            
            const report = await aggregator.generateConsolidatedReport(testResults);
            
            // Save consolidated report
            fs.writeFileSync('test-results/ui-audit-report.json', JSON.stringify(report, null, 2));
            
            // Generate HTML report
            const htmlReport = await aggregator.generateHTMLReport(report);
            fs.writeFileSync('test-results/ui-audit-report.html', htmlReport);
            
            console.log('Generated consolidated UI audit report');
          }
          
          generateReport().catch(console.error);
          "

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ui-audit-report
          path: |
            frontend/test-results/ui-audit-report.json
            frontend/test-results/ui-audit-report.html
          retention-days: 90

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = path.join(process.cwd(), 'frontend', 'test-results', 'ui-audit-report.json');
              if (!fs.existsSync(reportPath)) {
                console.log('No report file found');
                return;
              }
              
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const summary = report.summary || {};
              const criticalIssues = summary.criticalIssues || 0;
              const majorIssues = summary.majorIssues || 0;
              const minorIssues = summary.minorIssues || 0;
              const totalIssues = summary.totalIssues || 0;
              
              const accessibilityScore = summary.accessibilityScore || 0;
              const visualRegressions = summary.visualRegressionCount || 0;
              
              let status = '✅ All tests passed';
              if (criticalIssues > 0) {
                status = '❌ Critical issues found';
              } else if (majorIssues > 0) {
                status = '⚠️ Major issues found';
              } else if (minorIssues > 0) {
                status = '⚡ Minor issues found';
              }
              
              const comment = `## UI/UX Audit Results ${status}
              
              ### Summary
              - **Total Issues**: ${totalIssues}
              - **Critical**: ${criticalIssues}
              - **Major**: ${majorIssues}
              - **Minor**: ${minorIssues}
              - **Accessibility Score**: ${accessibilityScore}%
              - **Visual Regressions**: ${visualRegressions}
              
              ### Test Coverage
              - Visual Regression Testing: ${report.pageReports?.length || 0} pages tested
              - Accessibility Compliance: WCAG 2.1 AA validation
              - Theme Compatibility: Light/Dark mode testing
              - Responsive Design: Multi-device validation
              
              ${criticalIssues > 0 ? '⚠️ **Action Required**: Critical accessibility or visual issues detected that may impact user experience.' : ''}
              
              📊 [View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to create PR comment:', error);
            }

  cleanup:
    runs-on: ubuntu-latest
    needs: [report-generation]
    if: always()
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            // Keep only the consolidated report and recent baselines
            const keepArtifacts = ['ui-audit-report'];
            const artifactsToDelete = artifacts.data.artifacts.filter(
              artifact => !keepArtifacts.some(keep => artifact.name.includes(keep))
            );
            
            for (const artifact of artifactsToDelete) {
              if (artifact.created_at < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }