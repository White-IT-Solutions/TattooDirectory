{
  "name": "tattoo-directory-mvp",
  "version": "1.0.0",
  "description": "Tattoo Artist Directory MVP - Local Development Environment",
  "private": true,
  "scripts": {
    "local:start": "node scripts/deployment/platform-launcher.js start",
    "local:stop": "node scripts/deployment/platform-launcher.js stop",
    "local:restart": "npm run local:stop && npm run local:start",
    "local:start:windows": "scripts\\start-local.bat",
    "local:start:unix": "bash scripts/start-local.sh",
    "local:stop:windows": "scripts\\stop-local.bat",
    "local:stop:unix": "bash scripts/stop-local.sh",
    "local:logs": "docker-compose -f devtools/docker/docker-compose.local.yml logs -f",
    "local:logs:backend": "docker-compose -f devtools/docker/docker-compose.local.yml logs -f backend",
    "local:logs:frontend": "docker-compose -f devtools/docker/docker-compose.local.yml logs -f frontend",
    "local:logs:localstack": "docker-compose -f devtools/docker/docker-compose.local.yml logs -f localstack",
    "local:logs:swagger": "docker-compose -f devtools/docker/docker-compose.local.yml logs -f swagger-ui",
    "local:logs:viewer": "node scripts/log-viewer.js",
    "local:health": "node scripts/monitoring/health-check.js",
    "local:clean": "node scripts/deployment/platform-launcher.js clean",
    "local:reset": "npm run local:clean && npm run local:start",
    "local:status": "docker-compose -f devtools/docker/docker-compose.local.yml ps",
    "local:utils": "node scripts/dev-utils.js",
    "local:test-api": "node scripts/dev-utils.js test",
    "local:cleanup": "node scripts/dev-utils.js cleanup",
    "local:report": "node scripts/dev-utils.js report",
    "local:platform-info": "node scripts/deployment/platform-launcher.js info",
    "local:docker-info": "node scripts/deployment/platform-launcher.js docker-info",
    "local:monitor": "node scripts/resource-monitor.js full",
    "local:monitor:live": "node scripts/resource-monitor.js monitor",
    "local:resources": "node scripts/resource-monitor.js recommendations",
    "seed": "cd scripts && npm run seed",
    "seed:clean": "cd scripts && npm run seed:clean",
    "seed:validate": "cd scripts && npm run seed:validate",
    "config": "cd scripts && npm run config",
    "config:validate": "cd scripts && npm run config:validate",
    "config:test": "cd scripts && node test-configuration.js",
    "state": "cd scripts && npm run state",
    "state:reset": "cd scripts && npm run state:reset",
    "setup-data": "node scripts/data-cli.js setup-data",
    "setup-data:frontend-only": "node scripts/data-cli.js setup-data --frontend-only",
    "setup-data:images-only": "node scripts/data-cli.js setup-data --images-only",
    "setup-data:force": "node scripts/data-cli.js setup-data --force",
    "reset-data": "node scripts/data-cli.js reset-data",
    "reset-data:clean": "node scripts/data-cli.js reset-data clean",
    "reset-data:fresh": "node scripts/data-cli.js reset-data fresh",
    "reset-data:minimal": "node scripts/data-cli.js reset-data minimal",
    "reset-data:search-ready": "node scripts/data-cli.js reset-data search-ready",
    "reset-data:location-test": "node scripts/data-cli.js reset-data location-test",
    "reset-data:style-test": "node scripts/data-cli.js reset-data style-test",
    "reset-data:performance-test": "node scripts/data-cli.js reset-data performance-test",
    "reset-data:frontend-ready": "node scripts/data-cli.js reset-data frontend-ready",
    "seed-scenario": "node scripts/data-cli.js seed-scenario",
    "seed-scenario:minimal": "node scripts/data-cli.js seed-scenario minimal",
    "seed-scenario:search-basic": "node scripts/data-cli.js seed-scenario search-basic",
    "seed-scenario:london-artists": "node scripts/data-cli.js seed-scenario london-artists",
    "seed-scenario:high-rated": "node scripts/data-cli.js seed-scenario high-rated",
    "seed-scenario:new-artists": "node scripts/data-cli.js seed-scenario new-artists",
    "seed-scenario:booking-available": "node scripts/data-cli.js seed-scenario booking-available",
    "seed-scenario:portfolio-rich": "node scripts/data-cli.js seed-scenario portfolio-rich",
    "seed-scenario:multi-style": "node scripts/data-cli.js seed-scenario multi-style",
    "seed-scenario:pricing-range": "node scripts/data-cli.js seed-scenario pricing-range",
    "seed-scenario:full-dataset": "node scripts/data-cli.js seed-scenario full-dataset",
    "validate-data": "node scripts/data-cli.js validate-data",
    "validate-data:consistency": "node scripts/data-cli.js validate-data consistency",
    "validate-data:images": "node scripts/data-cli.js validate-data images",
    "validate-data:scenarios": "node scripts/data-cli.js validate-data scenarios",
    "health-check": "node scripts/data-cli.js health-check",
    "data-status": "node scripts/data-cli.js data-status",
    "scenarios": "node scripts/data-cli.js scenarios",
    "reset-states": "node scripts/data-cli.js reset-states",
    "help": "node scripts/data-cli.js help",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "docker-compose -f devtools/docker/docker-compose.local.yml up backend",
    "test:integration": "npm test --workspace=@tattoo-directory/integration-tests",
    "test:integration:api": "npm run test:api --workspace=@tattoo-directory/integration-tests",
    "test:integration:data": "npm run test:data --workspace=@tattoo-directory/integration-tests",
    "test:integration:setup": "npm run test:setup --workspace=@tattoo-directory/integration-tests",
    "test:integration:cleanup": "npm run test:cleanup --workspace=@tattoo-directory/integration-tests",
    "test:integration:coverage": "npm run test:coverage --workspace=@tattoo-directory/integration-tests",
    "test:e2e": "npm test --workspace=tattoo-directory-e2e-tests",
    "test:e2e:setup": "npm run setup --workspace=tattoo-directory-e2e-tests",
    "test:e2e:workflows": "npm run test:workflows --workspace=tattoo-directory-e2e-tests",
    "test:e2e:integration": "cd tests/e2e && node run-tests.js tests/integration/**/*.test.js",
    "test:e2e:visual": "cd tests/e2e && node run-tests.js tests/visual/**/*.test.js",
    "test:e2e:headless": "cd tests/e2e && HEADLESS=false npm test",
    "test:e2e:debug": "cd tests/e2e && DEBUG=true HEADLESS=false npm test",
    "test:e2e:clean": "cd tests/e2e && npm run clean",
    "debug:start": "ENABLE_BACKEND_DEBUG=true ENABLE_FRONTEND_DEBUG=true npm run local:start",
    "debug:backend": "ENABLE_BACKEND_DEBUG=true npm run local:start",
    "debug:frontend": "ENABLE_FRONTEND_DEBUG=true npm run local:start",
    "logs:start": "node scripts/log-aggregator.js",
    "logs:view": "node scripts/log-viewer.js --follow",
    "logs:backend": "node scripts/log-viewer.js --follow backend",
    "logs:frontend": "node scripts/log-viewer.js --follow frontend",
    "logs:errors": "node scripts/log-viewer.js --level ERROR --follow",
    "monitor:localstack": "node scripts/localstack-monitor.js watch",
    "monitor:health": "node scripts/localstack-monitor.js health",
    "monitor:report": "node scripts/localstack-monitor.js report",
    "monitor:reset": "node scripts/localstack-monitor.js reset",
    "performance:monitor": "node scripts/performance-monitor.js",
    "performance:monitor:continuous": "node scripts/performance-monitor.js --continuous",
    "performance:monitor:startup": "node scripts/performance-monitor.js --startup",
    "performance:resources": "node scripts/resource-usage-monitor.js --continuous",
    "performance:resources:once": "node scripts/resource-usage-monitor.js --once",
    "performance:benchmark": "node scripts/performance-benchmarks.js --full",
    "performance:benchmark:quick": "node scripts/performance-benchmarks.js --quick",
    "optimize:startup": "node scripts/startup-optimizer.js --optimize",
    "optimize:startup:benchmark": "node scripts/startup-optimizer.js --benchmark",
    "optimize:cache": "node scripts/docker-cache-optimizer.js --optimize",
    "optimize:cache:analyze": "node scripts/docker-cache-optimizer.js --analyze",
    "performance:dashboard": "node scripts/performance-dashboard.js",
    "performance:export": "node scripts/performance-dashboard.js --export",
    "performance:demo": "node scripts/performance-demo.js",
    "performance:test": "node scripts/test-performance-monitoring.js",
    "monitor:comprehensive": "node scripts/start-monitoring.js start",
    "monitor:validate": "node scripts/start-monitoring.js validate",
    "monitor:status": "node scripts/start-monitoring.js status",
    "monitor:config": "node scripts/start-monitoring.js config show",
    "monitor:config:reset": "node scripts/start-monitoring.js config reset",
    "monitor:dashboard": "node scripts/comprehensive-monitoring-dashboard.js",
    "monitor:health-advanced": "node scripts/health-monitor.js check",
    "monitor:health-continuous": "node scripts/health-monitor.js monitor",
    "monitor:environment": "node scripts/environment-health-validator.js validate",
    "monitor:environment-continuous": "node scripts/environment-health-validator.js monitor",
    "alerts:test": "node scripts/alert-system.js",
    "test:monitoring": "node scripts/test-monitoring-system.js",
    "dev:hot-reload": "node dev-tools/hot-reload-proxy.js",
    "dev:mock-data": "node dev-tools/mock-data-generator.js",
    "dev:debug-logger": "node dev-tools/debug-logger.js",
    "dev:error-tester": "node dev-tools/error-scenario-tester.js",
    "dev:mock-dataset": "node dev-tools/mock-data-generator.js dataset",
    "dev:mock-artists": "node dev-tools/mock-data-generator.js artists --count 20",
    "dev:mock-search": "node dev-tools/mock-data-generator.js search --style traditional",
    "dev:mock-errors": "node dev-tools/mock-data-generator.js error --type validation",
    "dev:test-errors": "node dev-tools/error-scenario-tester.js test-suite",
    "dev:list-scenarios": "node dev-tools/error-scenario-tester.js list",
    "dev:activate-error": "node dev-tools/error-scenario-tester.js activate",
    "dev:deactivate-errors": "node dev-tools/error-scenario-tester.js deactivate-all",
    "dev:debug-test": "node dev-tools/debug-logger.js test",
    "dev:debug-export": "node dev-tools/debug-logger.js export",
    "dev:advanced": "node dev-tools/advanced-dev-manager.js start",
    "dev:advanced:stop": "node dev-tools/advanced-dev-manager.js stop",
    "dev:advanced:restart": "node dev-tools/advanced-dev-manager.js restart",
    "dev:advanced:status": "node dev-tools/advanced-dev-manager.js status",
    "dev:advanced:health": "node dev-tools/advanced-dev-manager.js health",
    "test:comprehensive": "node scripts/comprehensive-test-runner.js",
    "test:final-integration": "node scripts/final-integration-tester.js",
    "test:frontend-sync-errors": "node scripts/run-frontend-sync-error-tests.js",
    "test:frontend-sync-errors:verbose": "node scripts/run-frontend-sync-error-tests.js --verbose",
    "validate:cross-platform": "node scripts/cross-platform-validator.js",
    "validate:parity": "node scripts/comprehensive-parity-validator.js validate",
    "validate:production-parity": "node scripts/production-parity-validator.js validate",
    "validate:deployment": "node scripts/deployment-simulation-tester.js",
    "validate:readiness": "node scripts/production-readiness-checklist.js validate",
    "validate:all": "npm run test:final-integration && npm run validate:cross-platform && npm run validate:parity",
    "validate:complete": "npm run test:comprehensive",
    "ci:test": "npm run test:comprehensive",
    "ci:validate": "npm run validate:complete",
    "security:validate": "node scripts/security/security-validator.js validate",
    "security:validate-env": "node scripts/security/environment-validator.js validate",
    "security:validate-network": "node scripts/security/docker-network-security.js validate",
    "security:validate-access": "node scripts/security/access-control-manager.js validate",
    "security:scan-images": "node scripts/security/docker-image-scanner.js",
    "security:fix": "node scripts/security/security-validator.js fix",
    "security:configure": "node scripts/security/security-validator.js configure",
    "security:monitor": "node scripts/security/security-validator.js monitor",
    "security:report": "node scripts/security/security-validator.js report",
    "security:template": "node scripts/security/environment-validator.js template",
    "security:sanitize": "node scripts/security/environment-validator.js sanitize",
    "security:configure-network": "node scripts/security/docker-network-security.js configure",
    "security:configure-access": "node scripts/security/access-control-manager.js configure",
    "local:start:secure": "npm run security:validate && npm run local:start",
    "local:emergency-stop": "docker-compose -f devtools/docker/docker-compose.local.yml down --remove-orphans && docker network prune -f"
  },
  "devDependencies": {
    "axios": "^1.6.0",
    "express": "^4.18.2",
    "http-proxy-middleware": "^2.0.6",
    "chokidar": "^3.5.3",
    "socket.io": "^4.7.4"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "workspaces": [
    "frontend",
    "backend",
    "scripts",
    "tests/integration",
    "tests/e2e"
  ]
}
