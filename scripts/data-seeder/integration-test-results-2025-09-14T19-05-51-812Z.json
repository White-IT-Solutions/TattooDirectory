{
  "timestamp": "2025-09-14T19:05:51.812Z",
  "stats": {
    "passed": 14,
    "failed": 5,
    "skipped": 0
  },
  "results": [
    {
      "command": "node data-manager.js",
      "description": "Data Manager help",
      "status": "FAIL",
      "error": "Command failed: node data-manager.js",
      "output": "📋 Data Manager Usage:\n  node data-manager.js export [path]\n  node data-manager.js import <path>\n  node data-manager.js backup [name]\n  node data-manager.js restore <backup-key>\n  node data-manager.js list-backups"
    },
    {
      "command": "node selective-seeder.js",
      "description": "Selective Seeder help",
      "status": "FAIL",
      "error": "Command failed: node selective-seeder.js",
      "output": "🎯 Selective Seeder Usage:\n  node selective-seeder.js list\n  node selective-seeder.js seed <scenario-name>\n\nExample:\n  node selective-seeder.js seed search-basic"
    },
    {
      "command": "node data-validator.js",
      "description": "Data Validator help",
      "status": "FAIL",
      "error": "Command failed: node data-validator.js",
      "output": "🔍 Data Validator Usage:\n  node data-validator.js files       - Validate test data files\n  node data-validator.js database     - Validate DynamoDB data\n  node data-validator.js opensearch   - Validate OpenSearch data\n  node data-validator.js consistency  - Check data consistency\n  node data-validator.js all          - Run all validations"
    },
    {
      "command": "node data-reset.js",
      "description": "Data Reset help",
      "status": "FAIL",
      "error": "Command failed: node data-reset.js",
      "output": "🔄 Data Reset Usage:\n  node data-reset.js list                    - List available reset states\n  node data-reset.js reset <state>          - Reset to specific state\n  node data-reset.js snapshot <name>        - Create data snapshot\n  node data-reset.js restore <snapshot>     - Restore from snapshot\n  node data-reset.js validate               - Validate current state\n  node data-reset.js clear [type]           - Clear data (all/dynamodb/opensearch/s3)\n\nExample:\n  node data-reset.js reset fresh\n  node data-reset.js reset search-ready"
    },
    {
      "command": "node test-utilities.js",
      "description": "Test Utilities help",
      "status": "FAIL",
      "error": "Command failed: node test-utilities.js",
      "output": "🧪 Test Utilities Usage:\n  node test-utilities.js connectivity  - Test service connections\n  node test-utilities.js data          - Test data integrity\n  node test-utilities.js search        - Test search functionality\n  node test-utilities.js performance   - Test performance metrics\n  node test-utilities.js all           - Run all tests\n  node test-utilities.js cleanup       - Clean up test data"
    },
    {
      "command": "node selective-seeder.js list",
      "description": "List test scenarios",
      "status": "PASS",
      "output": "🎯 Available Test Scenarios:\n┌─────────────────────┬─────────────────────────────────────────────────┐\n│ Scenario            │ Description                                     │\n├─────────────────────┼─────────────────────────────────────────────────┤\n│ search-basic        │ Basic search functionality testing              │\n│ location-london     │ London-based artists for location testing       │\n│ style-traditional   │ Traditional style artists for style filtering   │\n│ high-rating         │ High-rated artists for rating tests             │\n│ new-artists         │ Recently joined artists for timeline tests      │\n│ booking-available   │ Artists with open booking for availability t... │\n│ portfolio-rich      │ Artists with extensive portfolios for image ... │\n│ multi-style         │ Artists with multiple styles for complex fil... │\n│ pricing-range       │ Artists with various pricing for price filte... │\n│ minimal             │ Minimal dataset for quick testing               │\n└─────────────────────┴─────────────────────────────────────────────────┘"
    },
    {
      "command": "node data-reset.js list",
      "description": "List reset states",
      "status": "PASS",
      "output": "🔄 Available Reset States:\n┌─────────────────┬─────────────────────────────────────────────────┐\n│ State           │ Description                                     │\n├─────────────────┼─────────────────────────────────────────────────┤\n│ clean           │ Complete clean state - no data                  │\n│ fresh           │ Fresh start with full test dataset              │\n│ minimal         │ Minimal dataset for quick testing               │\n│ search-ready    │ Dataset optimized for search testing            │\n│ location-test   │ London-focused dataset for location testing     │\n│ style-test      │ Traditional style focused dataset               │\n│ performance-test │ Large dataset for performance testing           │\n│ backup-restore  │ Reset to last backup state                      │\n└─────────────────┴─────────────────────────────────────────────────┘\n\n📈 Reset Statistics:\n┌─────────────┬─────────┐\n│ Operation   │ Count   │\n├─────────────┼─────────┤\n│ Cleared     │       0 │\n│ Seeded      │       0 │\n│ Restored    │       0 │\n│ Failed      │       0 │\n└─────────────┴─────────┘"
    },
    {
      "command": "node data-validator.js files",
      "description": "Validate test data files",
      "status": "PASS",
      "output": "📋 Validating test data files...\n🔍 Validating 10 artists records...\n✅ artists: 10 valid, 0 invalid, 2 warnings\n🔍 Validating 3 studios records...\n✅ studios: 3 valid, 0 invalid, 0 warnings\n🔍 Validating 17 styles records...\n✅ styles: 17 valid, 0 invalid, 0 warnings\n\n📊 Validation Report:\n┌─────────────┬─────────┬─────────┬──────────┐\n│ Data Type   │ Valid   │ Invalid │ Warnings │\n├─────────────┼─────────┼─────────┼──────────┤\n│ artists     │      10 │       0 │        2 │\n│ studios     │       3 │       0 │        0 │\n│ styles      │      17 │       0 │        0 │\n└─────────────┴─────────┴─────────┴──────────┘"
    },
    {
      "command": "node simple-validator.js",
      "description": "Simple validator",
      "status": "PASS",
      "output": "🔍 Validating test data files...\n\n📊 Validating 10 artists...\n\n📊 Validating 3 studios...\n\n📊 Validating 17 styles...\n\n📈 Validation Summary:\n✅ Valid records: 30\n❌ Invalid records: 0\n\n✅ All test data is valid!"
    },
    {
      "command": "node -e \"const DataManager = require('./data-manager'); console.log('DataManager loaded successfully')\"",
      "description": "Data Manager module loading",
      "status": "PASS",
      "output": "DataManager loaded successfully"
    },
    {
      "command": "node -e \"const { SelectiveSeeder } = require('./selective-seeder'); console.log('SelectiveSeeder loaded successfully')\"",
      "description": "Selective Seeder module loading",
      "status": "PASS",
      "output": "SelectiveSeeder loaded successfully"
    },
    {
      "command": "node -e \"const DataValidator = require('./data-validator'); console.log('DataValidator loaded successfully')\"",
      "description": "Data Validator module loading",
      "status": "PASS",
      "output": "DataValidator loaded successfully"
    },
    {
      "command": "node -e \"const DataReset = require('./data-reset'); console.log('DataReset loaded successfully')\"",
      "description": "Data Reset module loading",
      "status": "PASS",
      "output": "DataReset loaded successfully"
    },
    {
      "command": "node -e \"const TestUtilities = require('./test-utilities'); console.log('TestUtilities loaded successfully')\"",
      "description": "Test Utilities module loading",
      "status": "PASS",
      "output": "TestUtilities loaded successfully"
    },
    {
      "command": "node -e \"const AWS = require('aws-sdk'); console.log('AWS SDK configuration:', AWS.config.region || 'default')\"",
      "description": "AWS SDK configuration",
      "status": "PASS",
      "output": "AWS SDK configuration: default"
    },
    {
      "command": "node -e \"console.log('Environment check:', process.env.NODE_ENV || 'development')\"",
      "description": "Environment variable handling",
      "status": "PASS",
      "output": "Environment check: development"
    },
    {
      "command": "node data-manager.js invalid-command",
      "description": "Data Manager invalid command handling",
      "status": "PASS",
      "output": "Command failed as expected"
    },
    {
      "command": "node selective-seeder.js seed invalid-scenario",
      "description": "Selective Seeder invalid scenario handling",
      "status": "PASS",
      "output": "Command failed as expected"
    },
    {
      "command": "node data-reset.js reset invalid-state",
      "description": "Data Reset invalid state handling",
      "status": "PASS",
      "output": "Command failed as expected"
    }
  ]
}