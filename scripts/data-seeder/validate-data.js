const path = require('path');
const { validateAllTestData } = require('./validators');

/**
 * Standalone data validation script
 */
async function main() {
  console.log('üîç Validating test data files...');
  
  const testDataDir = path.join(__dirname, 'test-data');
  const results = validateAllTestData(testDataDir);
  
  console.log('\nüìä Validation Results:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Data Type   ‚îÇ Valid ‚îÇ Invalid ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  console.log(`‚îÇ Artists     ‚îÇ ${results.artists.valid.toString().padStart(5)} ‚îÇ ${results.artists.invalid.toString().padStart(7)} ‚îÇ`);
  console.log(`‚îÇ Studios     ‚îÇ ${results.studios.valid.toString().padStart(5)} ‚îÇ ${results.studios.invalid.toString().padStart(7)} ‚îÇ`);
  console.log(`‚îÇ Styles      ‚îÇ ${results.styles.valid.toString().padStart(5)} ‚îÇ ${results.styles.invalid.toString().padStart(7)} ‚îÇ`);
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  let hasErrors = false;
  
  // Report artist errors
  if (results.artists.errors.length > 0) {
    hasErrors = true;
    console.log('\n‚ùå Artist Data Errors:');
    results.artists.errors.forEach(error => {
      if (error.artistId) {
        console.log(`  ‚Ä¢ ${error.artistId} (index ${error.index}):`);
        error.errors.forEach(err => console.log(`    - ${err}`));
      } else {
        console.log(`  ‚Ä¢ File error: ${error.error}`);
      }
    });
  }
  
  // Report studio errors
  if (results.studios.errors.length > 0) {
    hasErrors = true;
    console.log('\n‚ùå Studio Data Errors:');
    results.studios.errors.forEach(error => {
      if (error.studioId) {
        console.log(`  ‚Ä¢ ${error.studioId} (index ${error.index}):`);
        error.errors.forEach(err => console.log(`    - ${err}`));
      } else {
        console.log(`  ‚Ä¢ File error: ${error.error}`);
      }
    });
  }
  
  // Report style errors
  if (results.styles.errors.length > 0) {
    hasErrors = true;
    console.log('\n‚ùå Style Data Errors:');
    results.styles.errors.forEach(error => {
      if (error.styleId) {
        console.log(`  ‚Ä¢ ${error.styleId} (index ${error.index}):`);
        error.errors.forEach(err => console.log(`    - ${err}`));
      } else {
        console.log(`  ‚Ä¢ File error: ${error.error}`);
      }
    });
  }
  
  if (hasErrors) {
    console.log('\n‚ùå Validation failed. Please fix the errors above.');
    process.exit(1);
  } else {
    console.log('\n‚úÖ All test data is valid!');
    process.exit(0);
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Validation script failed:', error.message);
    process.exit(1);
  });
}

module.exports = { main };